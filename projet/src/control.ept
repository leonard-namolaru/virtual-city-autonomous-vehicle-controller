(* open Globals importe tous les elements du module Globals, 
 * ce qui permet de les utiliser sans utiliser la prefixe "Globals." *)
open Globals

(* Pour l’integration, on suppose que notre integrale est echantillonne tous les dt instants. 
 * Si dt est tres petit, ca nous donne une bonne approximation de l’integrale. 
 * On fait une hypothese sur la variation du signal qu’on integre : dans notre code dt est fixe.
 * Cela signifie que dt secondes (instants physiques) s'ecoulent entre deux instants logiques. *)
const dt : float = 0.01

(* **************************************** DEBUG **************************************** *)

(* Le fichier globals.ept definit le type itielt : type itielt = { act : action; param : float }
 * et fournit la fonction suivante : dbg_action(msg : string; act : action)
 * Mais cette fonction ne permet pas d'imprimer a la fois le type d'operation et la valeur du parametre sur la meme ligne. 
 * A cet effet, la fonction suivante a ete ecrite :   *)
fun dbg_itielt(msg : string; iti : itielt) returns ()
var w0, w1, w2, w3 : Debug.world;
let
  w0 = Debug.d_string(Debug.d_init(), msg);

  switch iti.act
  | Go do w1 = Debug.d_string(w0, "Go ");
  | Turn do w1 = Debug.d_string(w0, "Turn ");
  | Stop do w1 = Debug.d_string(w0, "Stop ");
  end;

  w2 = Debug.d_float(w1, iti.param);
  w3 = Debug.d_string(w2, "\n");
tel

(* La fonction dbg_pid() permet d'imprimer sur une meme ligne tous les coefficients utilises pour le calcul du pid *)
fun dbg_pid(msg : string; kp, ki, kd : float) returns ()
var w0, w1, w2, w3, w4, w5, w6, w7 : Debug.world;
let
  w0 = Debug.d_string(Debug.d_init(), msg);

  w1 = Debug.d_string(w0, "kp = ");
  w2 = Debug.d_float(w1, kp);
  w3 = Debug.d_string(w2, " ki = ");
  w4 = Debug.d_float(w3, ki);
  w5 = Debug.d_string(w4, " kd = ");
  w6 = Debug.d_float(w5, kd);

  w7 = Debug.d_string(w6, "\n");
tel

(* trace_red_sensors() : efficace pour verifier si la voiture s'arrete aux feux rouges *)
(* Pour que le graphique s'affiche, il faut mettre un commentaire la ligne 137 du fichier city.ept. 
 * Il s'agit de la ligne suivante : () = Trace.trace_int("sonar", sonar);
 *
 ../tools/hept-plot  ./scontest -e assets/XX.map *)
node trace_red_sensors(sensor_road_red, sensor_front_red : int) returns ()
let
    () = Trace.trace_int("sens.s_road.red", sensor_road_red); 
    () = Trace.trace_int("sens.s_front.red", sensor_front_red); 
tel

(* *************************************************************************************** *)
fun is_green_line_on_road(sensor_road : color) returns (result : bool)
let
  result = sensor_road.green = 255 and sensor_road.blue = 0;
tel

(* **************************************** COLOR COMPARISON **************************************** *)
(* Etant donne que l'espace colorimetrique RGB a trois dimensions (R, G, B), 
 * sa distance euclidienne serait definie comme suit :
 * distance = sqrt( (r2 - r1)^2 + (g2 - g1)^2 + (b2 - b1)^2 )
 * Source : https://observablehq.com/@luciyer/euclidian-distance-in-rgb-color-space 
 *
 * Bien que le fichier utilities.ept contienne des fonctions telles que norm_color() et compare_colors(), 
 * elles ne correspondaient pas a la méthode que nous voulions utiliser. 
 * C'est pourquoi nous l'avons implemente en utilisant les 3 fonctions suivantes, 
 * chacune d'elles effectue une des etapes du calcul. *)

(* Une fonction simple qui reçoit un nombre entier et renvoie le nombre à la puissance 2 *)
fun pow_exponent_two(num : int) returns (result : int)
let
  result = num * num;
tel

(* La fonction recoit 2 entiers representant la meme partie au sein d'une valeur RGB 
 * (par exemple, 2 valeurs representant la couleur rouge dans deux valeurs RGB differentes) 
 * et renvoie la difference entre la deuxieme valeur et la premiere, a la puissance 2 *)
fun pow_difference_rgb_component(rgb_component1, rgb_component2 : int) returns (result : float)
let
  result = Mathext.float( pow_exponent_two( rgb_component2 - rgb_component1 ) );
tel

(* Distance euclidienne entre deux couleurs *)
fun euclidian_distance_rgb_color(color1, color2 : color) returns (d : float)
let
  d = Mathext.sqrt( pow_difference_rgb_component(color2.green, color1.green)
                 +. pow_difference_rgb_component(color2.red, color1.red) 
                 +. pow_difference_rgb_component(color2.blue, color1.blue) );
tel

(* **************************************** PID **************************************** *)

(* Pour le pid, nous devons calculer l'erreur : une valeur comprise entre -1 et 1. 
 * Pour le faire, nous verifions quelle est la distance entre le point ou nous sommes censes etre et le point ou nous sommes maintenant,
 * nous divisons le resultat par 255 car nous calculons la distance entre des valeurs de couleur et ainsi nous obtenons une valeur entre 0 et 1.
 *
 * Apres cela, nous verifions si la voiture devie davantage du cote droit (couleur rouge) ou du cote gauche (couleur verte),
 * déterminant ainsi que si la voiture devie davantage du cote droit, la valeur d'erreur que nous avons calculee sera positive,
 * si la voiture devie davantage vers la gauche, l'erreur est negative. *)
fun get_error(sensor_road : color) returns (error : float)
var in_red, in_green, error_abs : float;
let
  error_abs = if sensor_road.red = 255 and sensor_road.blue = 0  (* Si nous sommes au-dessus d'une ligne rouge sur la route indiquant la presence d'un feu de circulation *)
               or is_green_line_on_road(sensor_road) (* Si nous sommes au-dessus d'une ligne verte sur la route indiquant que nous devons passer a l'etape suivante *)
                 then 0.0
                 else euclidian_distance_rgb_color( { red = 0; green = 0; blue = 255 }, sensor_road) /. 255.0;

  in_red   =  Mathext.float(sensor_road.red) /. 255.0;
  in_green =  Mathext.float(sensor_road.green) /. 255.0;

  error = error_abs *. (if in_green >. in_red then -. 1.0 else 1.0);
tel

(* Un noeud dont le but est de determiner les valeurs des coefficients kp, ki et kd.
 * Mode de fonctionnement : la valeur de kp est egale a la valeur de la vitesse maximale autorisee, 
 * la valeur de kd augmente progressivement tant que l'augmentation ne provoque pas d'erreur. 
 * Une fois la valeur de kd determinee, le noeud determine la valeur de ki en utilisant la meme methode 
 *
 * Sources : https://www.arnabkumardas.com/platforms/everything-esp/esp32-qtr-8rc-pid-line-follower-robot-v1/ 
 *           https://towardinfinity.medium.com/pid-for-line-follower-11deb3a1a643 *)
node set_kp_ki_kd(after_turn : bool; max_speed, error : float) returns (kp, ki, kd : float)
var ki_determined, kd_determined : bool;
    pre_ki, pre_kd, pre_pre_ki, pre_pre_kd : float;
let
  kp = max_speed;

  reset 
    (* Si la valeur de kd n'a pas encore ete determinee et tant que l'augmentation de kd n'entraine pas d'erreurs *)
    kd = 0.0 -> if (not kd_determined and error = 0.0) 
                    then (pre kd) +. 1.0 
                else (* Si la valeur de kd a deja ete determinee mais que kd est inferieur a 14, nous fixons la valeur a 14 *)
                    Utilities.max_float(14.0, pre kd);

    (* Si ki n'a pas encore ete determine et que kd a ete determine et tant que l'augmentation de ki ne conduit pas a des erreurs *)
    ki = 0.0 -> if (not ki_determined and kd_determined and (error = 0.0)) 
                 or (kd_determined <> false fby kd_determined) (* Ou alternativement - si la valeur de kd vient d'etre determiee, on essaiera d'augmenter ki malgre tout  *)
                    then (pre ki) +. 1.0 
                else 
                    (pre ki);

    (* Nous initialisons pre_kd et pre_pre_kd avec des valeurs differentes car si nous avions initialise les deux avec la meme valeur, 
     * alors au debut pre_kd serait egal a pre_pre_kd, ce qui aurait conduit a ce que la valeur de kd_determined soit true. *)
    pre_ki = -.1.0 fby ki;
    pre_kd = -.1.0 fby kd;

    pre_pre_ki = 1.0 fby pre_ki;
    pre_pre_kd = 1.0 fby pre_kd;

    (* Nous comparons la valeur precedente a la valeur qui a precede la valeur precedente et non a la valeur actuelle afin de ne pas creer d'erreur de causalite *)
    ki_determined = false -> if pre_ki = pre_pre_ki then true else (pre ki_determined);
    kd_determined = false -> if pre_kd = pre_pre_kd then true else (pre kd_determined);
  every after_turn; (* Apres chaque virage, nous determinons a nouveau les valeurs des coefficients *)
tel


(* PID controller : proportional–integral–derivative controller
 * La noeud pid_controller() recoit comme parametre error qui represente le taux d'erreur a l'instant courant. *)
node pid_controller(after_turn : bool; actual_speed, error : float) returns (y : float)
var pre_error : float; 
    kp, ki, kd : float;
let
  (* () = dbg_pid("\n", kp, ki, kd); *)

  pre_error = 0.0 fby error;
  (kp, ki, kd) =  set_kp_ki_kd(after_turn, actual_speed, error);

  y =   kp *. error +.  ki *. Utilities.integrator(error, dt, pre_error) +. kd *. Utilities.derivative(error, dt);
tel

(* **************************************** SPEED **************************************** *)
node get_actual_speed(sens : sensors ; iti : itielt) returns (actual_speed : float)
let
                  (* Si les capteurs captent uniquement une ligne rouge et que en même temps les le feu est rouge *)
  actual_speed =  if sens.s_front.red = 255 and sens.s_road.red = 255 and sens.s_road.blue = 0 or sens.s_sonar < 80 
                         then 0.0
                         else if iti.act = Go then iti.param *. 360.0 *. cD /. 100.0 
                                              else (0.0 fby actual_speed);
tel

fun speed_pid(pid, actual_speed : float) returns (speed : float)
let
  speed = actual_speed -. Utilities.abs(pid);
tel

node get_rspeed(iti : itielt; error, pid, actual_speed : float ; time_required_to_turn : int) returns (rspeed : wheels)
var speed_according_error : wheels;
let
  speed_according_error = if error >. 0.0  then { left = speed_pid(pid, actual_speed) ; right = actual_speed }
                                           else { left = actual_speed ; right = speed_pid(pid, actual_speed)};

  switch iti.act
  | Go do rspeed = speed_according_error;
  | Turn do rspeed = if Utilities.countdown(true, time_required_to_turn) > 0 
                          then if iti.param >. 0.0 then { left = 0.0 ; right = actual_speed} 
                                                   else {left = actual_speed ; right = 0.0}
                    else speed_according_error;
  | Stop do rspeed = { left = 0.0; right = 0.0};
  end;
tel

(* **************************************** CONTROLLER **************************************** *)

node controller(sens : sensors; iti : itielts) returns (rspeed : wheels; arriving : bool)
var pre_iti_param, actual_speed, error, pid : float; 
    pre_s_road_green : int ; last time_required_to_turn : int ; last i : int = 0;
    last after_turn : bool = false; 
  let
    (* () = trace_red_sensors(sens.s_road.red, sens.s_front.red); *)
    (* () = dbg_itielt("\n iti[i] = ", iti[>i<]); *)

    error = get_error(sens.s_road); 
    actual_speed =  get_actual_speed(sens, iti[>i<]);                 
    pid = pid_controller(true -> after_turn, actual_speed, error); 
    arriving = (iti[>i<]).act = Stop;

    pre_s_road_green = 0 fby sens.s_road.green;
    pre_iti_param = 0.0 fby (iti[>i<]).param;

  automaton
    state Go
      var distance_to_right_axis_after_turn : float;
      do
        (* Si les capturers ne captent qu'une ligne verte et si a l'instant precedent nous n'etions pas encore dans cette situation *)
        i = if (is_green_line_on_road(sens.s_road) and pre_s_road_green < 255) then (last i) + 1 else last i;
        rspeed =  get_rspeed(iti[>i<], error, pid, actual_speed, 0);
        after_turn = false;

        (* distance_to_right_axis_after_turn est la distance que la roue en mouvement doit parcourir pour se mettre dans le bon axe *)
        (* time_required_to_turn represente le temps necessaire pour tourner sur une roue avec la formule V = D/T *)
        distance_to_right_axis_after_turn = ((2.0 *. pi *. cB *. 100.0)) /. (360.0 /. Utilities.abs((iti[>i<]).param));
        time_required_to_turn = Mathext.int(distance_to_right_axis_after_turn /. pre_iti_param);
      until (iti[>i<]).act = Turn then Turn
      
    state Turn
      do 
        i = if (last time_required_to_turn > 0) then last i else (last i) + 1;  (* Lorsque le timer est termine, on passe a l'instruction suivante *)
        rspeed =  get_rspeed(iti[>i<], error, pid, actual_speed, time_required_to_turn);
        after_turn = true;

        (* Un compteur initialise dans GO. Represente le nombre d'instants dont la voiture a besoin pour tourner *)
        time_required_to_turn = last time_required_to_turn - 1;
      until (iti[>i<]).act = Go then Go
  end;
tel


